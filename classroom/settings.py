"""
Django settings for note project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import sys
import logging.config

from pathlib import Path
from dotenv import load_dotenv

DATA_UPLOAD_MAX_NUMBER_FIELDS = 65535
CLASSROOM_DIR = Path(__file__).resolve().parent.parent
ENV_PATH = CLASSROOM_DIR / '.env'
PROBLEM_GITHUB = "https://github.com/SeanHwangG/classroom/tree/main"
SECRET_KEY = 'i(1vsy6#=p!s&gnhrr-8%f4&a0kj8efee26v2*u%mjfyjw7d1l'
DEBUG = os.getenv("DEBUG")
load_dotenv(dotenv_path=ENV_PATH)

LOG_LEVEL = os.getenv("DJANGO_LOG_LEVEL", "WARN")
LOGGING_CONFIG = None  # Disable Django's logging setup

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        "simple": {
            'format': '{levelname} [{filename}:{lineno}] {message}',
            'style': '{',
        },
        "verbose": {
            'format': '{levelname} [{filename}:{lineno}] {message}',
            'style': '{',
        }
    },
    "loggers": {
        'django.db.backends': {
            'level': 'WARNING',   # DEBUG will log all queries, so change it to WARNING.
            'propagate': False,   # Don't propagate to other handlers
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': './debug.log',
            'formatter': 'verbose'
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'propagate': False,
        'level': LOG_LEVEL,
    },
})

os.environ["WDM_LOG_LEVEL"] = "50"
for _ in ("boto", "elasticsearch", "urllib3", "selenium.webdriver.remote.remote_connection"):
  logging.getLogger(_).setLevel(logging.CRITICAL)

print(f"Current log level is {LOG_LEVEL}")
ALLOWED_HOSTS = ["127.0.0.1", "eb-django-app-dev.elasticbeanstalk.com"]
INSTALLED_APPS = [
    # 'admin_numeric_filter',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'health_check.contrib.psutil',  # disk and memory utilization; requires psutil
    'django_extensions',
    'health_check',
    'rest_framework',
    'util',
    'gitbook',
    'problem',
    'user'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'classroom.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [CLASSROOM_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'classroom.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
if 'RDS_DB_NAME' in os.environ:
  DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.postgresql_psycopg2',
          'NAME': os.environ['RDS_DB_NAME'],
          'USER': os.environ['RDS_USERNAME'],
          'PASSWORD': os.environ['RDS_PASSWORD'],
          'HOST': os.environ['RDS_HOSTNAME'],
          'PORT': os.environ['RDS_PORT'],
      }
  }
else:
  DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.postgresql',
          'HOST': os.getenv('DB_HOST'),
          'NAME': os.getenv("DB_NAME"),
          'USER': os.getenv('DB_USER'),
          'PASSWORD': os.getenv('DB_PASSWORD'),
          'PORT': "5432"
      }
  }
logging.debug(DATABASES)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(CLASSROOM_DIR, "..", "www", "static")
STATICFILES_DIRS = (
    os.path.join(CLASSROOM_DIR, 'static'),
)
