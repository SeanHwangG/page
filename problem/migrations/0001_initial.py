# Generated by Django 3.1.7 on 2021-03-30 16:03

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Site',
            fields=[
                ('site_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('link', models.CharField(default='', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('group', models.CharField(choices=[('syntax', 'syntax'), ('algorithm', 'algorithm')], max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('solution_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('language', models.CharField(choices=[('python', 'python'), ('c++', 'c++'), ('java', 'java'), ('shell', 'shell'), ('sql', 'sql'), ('go', 'go')], default='python', max_length=255)),
                ('code', models.CharField(default='', max_length=65535)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='user.user')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('problem_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('level', models.FloatField(default=-1)),
                ('link', models.CharField(default='', max_length=255)),
                ('title', models.CharField(default='', max_length=255)),
                ('solution_link', models.CharField(default='', max_length=255)),
                ('site', models.ForeignKey(default='', on_delete=django.db.models.deletion.PROTECT, to='problem.site')),
                ('tags', models.ManyToManyField(to='problem.Tag')),
            ],
            options={
                'ordering': ['level'],
            },
        ),
    ]
