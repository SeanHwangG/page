"""
Django settings for note project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import sys
import logging.config

from pathlib import Path
from dotenv import load_dotenv


NOTE_DIR = Path(__file__).resolve().parent.parent.parent
API_DIR = NOTE_DIR / 'api'
BOOK_DIR = NOTE_DIR / 'book'
ENV_PATH = NOTE_DIR / '.env'
GITHUB_URL = "https://github.com/SeanHwangG/note/blob/book"
SECRET_KEY = 'i(1vsy6#=p!s&gnhrr-8%f4&a0kj8efee26v2*u%mjfyjw7d1l'
DEBUG = os.getenv("DEBUG")
load_dotenv(dotenv_path=ENV_PATH)

LOG_LEVEL = os.getenv("DJANGO_LOG_LEVEL", "WARN")
LOGGING_CONFIG = None  # Disable Django's logging setup

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        "simple": {
            'format': '{levelname} [{filename}:{lineno}] {message}',
            'style': '{',
        },
        "verbose": {
            'format': '{levelname} [{filename}:{lineno}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': './debug.log',
            'formatter': 'verbose'
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'propagate': True,
        'level': LOG_LEVEL,
    },
})

if len(sys.argv) > 1 and sys.argv[1] == 'test':
  logging.disable(logging.CRITICAL)

for _ in ("boto", "elasticsearch", "urllib3"):
  logging.getLogger(_).setLevel(logging.CRITICAL)

print(f"Current log level is {LOG_LEVEL}")
ALLOWED_HOSTS = ["127.0.0.1", "34.64.113.54"]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'health_check.contrib.psutil',              # disk and memory utilization; requires psutil
    'health_check',
    'rest_framework',
    'livereload',
    'util',
    'team',
    'gitbook',
    'problem',
    'solution',
    'user'
]

MIDDLEWARE = [
    'livereload.middleware.LiveReloadScript',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [API_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

STATIC_ROOT = 'static'
STATIC_URL = 'http://storage.googleapis.com/gitnote/static/'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.getenv('DB_HOST'),
        'NAME': os.getenv("DB_NAME"),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'PORT': "5432"
    }
}
logging.debug(DATABASES)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
